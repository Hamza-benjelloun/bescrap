{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  matchsList: []\n};\nexport const matchsSlice = createSlice({\n  name: 'matchs',\n  initialState,\n  reducers: {\n    setMatchs: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.matchsList = action.payload;\n    },\n    decrement: state => {},\n    incrementByAmount: (state, action) => {}\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setMatchs,\n  decrement,\n  incrementByAmount\n} = matchsSlice.actions;\nexport default matchsSlice.reducer;\nexport const store = configureStore({\n  reducer: matchsSlice.reducer\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself","map":{"version":3,"names":["configureStore","createSlice","initialState","matchsList","matchsSlice","name","reducers","setMatchs","state","action","payload","decrement","incrementByAmount","actions","reducer","store"],"sources":["/Users/benji/beinmatch/src/store/store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\n\nexport interface MatchState {\n  matchsList: []\n}\n\nconst initialState: MatchState = {\n  matchsList: []\n}\n\nexport const matchsSlice = createSlice({\n  name: 'matchs',\n  initialState,\n  reducers: {\n    setMatchs: (state, action: PayloadAction<any>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.matchsList = action.payload\n    },\n    decrement: (state) => {\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setMatchs, decrement, incrementByAmount } = matchsSlice.actions\n\nexport default matchsSlice.reducer\nexport const store = configureStore({\n  reducer: matchsSlice.reducer,\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAQ9D,MAAMC,YAAwB,GAAG;EAC/BC,UAAU,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGH,WAAW,CAAC;EACrCI,IAAI,EAAE,QAAQ;EACdH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAA0B,KAAK;MAChD;MACA;MACA;MACA;MACAD,KAAK,CAACL,UAAU,GAAGM,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,SAAS,EAAGH,KAAK,IAAK,CACtB,CAAC;IACDI,iBAAiB,EAAE,CAACJ,KAAK,EAAEC,MAA6B,KAAK,CAC7D;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEF,SAAS;EAAEI,SAAS;EAAEC;AAAkB,CAAC,GAAGR,WAAW,CAACS,OAAO;AAE9E,eAAeT,WAAW,CAACU,OAAO;AAClC,OAAO,MAAMC,KAAK,GAAGf,cAAc,CAAC;EAClCc,OAAO,EAAEV,WAAW,CAACU;AACvB,CAAC,CAAC;;AAEF"},"metadata":{},"sourceType":"module"}